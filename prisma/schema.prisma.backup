// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define the models
model User {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String   @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  role               String   @default("student")
  requirePasswordChange Boolean @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  submissions      Submission[]
  badges           EarnedBadge[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  email            String
  role             String
  token            String   @unique
  defaultPassword  String   // Default password for the new user
  status           String   @default("pending") // pending, accepted, expired
  invitedBy        String
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  updatedAt        DateTime @updatedAt

  @@index([email, status])
}

model Badge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl    String?
  categoryId  String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category    @relation(fields: [categoryId], references: [id])
  earnedBadges EarnedBadge[]
  submissions  Submission[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  badges      Badge[]
}

model Submission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  badgeId     String   @db.ObjectId
  status      String   @default("pending") // pending, approved, rejected
  comments    String?
  evidence    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge       Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedBadge EarnedBadge?
}

model EarnedBadge {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  badgeId      String   @db.ObjectId
  submissionId String?  @unique @db.ObjectId
  earnedAt     DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge        Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  submission   Submission? @relation(fields: [submissionId], references: [id])
} 